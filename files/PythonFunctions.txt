#==============================================================================
# #### Handy Python Functions ####
#==============================================================================
# ---------------------
# ---------------------
plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
##### Scientific notation on axes.
# ---------------------
# ---------------------
Array = np.array([list(map(float, line.split(Delimiter))) for line in 
open(FileName,'r')])
##### Fast load data.
# ---------------------
# ---------------------
Array = np.genfromtxt(FileName, delimiter=Delimiter, dtype=None)
##### Split input by line.
# ---------------------
# ---------------------
import matplotlib.pyplot as plt
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams["font.size"] = 12
##### Plot fonts global.
# ---------------------
# ---------------------
def LocFinder(Data, Master):
    global Locs
    Locs = []
    for i in range(len(Data)):
        Finder = np.argmin((Master - Data[i])**2)
        Locs.append(Finder)
##### Location finder.
# ---------------------
# ---------------------
z = [(x[0], len(list(x[1]))) for x in itertools.groupby(Locs)]
rep = max(z, key=lambda x:x[1])[1]
##### Find repeated.
# ---------------------
# ---------------------
np.savetxt(FileName, OutArrayWrite, delimiter=",", fmt='%s')
##### Save array.
# ---------------------
# ---------------------
Array = Array.sum(axis=1)
##### Sum array.
# ---------------------
# ---------------------
fig, ax = plt.subplots(figsize=(5,4))
ax.fill_between(Array[:,0], 1E-50, y, facecolor='r', alpha=0.5)
##### Fill between.
# ---------------------
# ---------------------
plt.grid(color = 'k', linestyle=':')
##### Traditional grid lines.
# ---------------------
# ---------------------
plt.subplots_adjust(left=0.20)
plt.subplots_adjust(bottom=0.15)
##### Plot margin adjustment - for when axis labels are cut-off.
# ---------------------
# ---------------------

path = os.path.dirname(os.path.realpath(__file__))
extension = 'txt'
os.chdir(path)
result = [i for i in glob.glob('*.{}'.format(extension))]

##### List all files of certain type in current directory.

# ---------------------
# ---------------------
Array = Array[Array[:,0].argsort()]
##### Sort array by collumn.
# ---------------------
# ---------------------
Array = (np.array(Array)).reshape((len(Array),1))
##### Reshape Array to be 2D.
# ---------------------
# ---------------------
plt.style.use('classic')
##### Use classic style plots.
# ---------------------
# ---------------------
def moving_average(a, n=20) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n
##### Moving average.
# ---------------------
# ---------------------
plt.legend(loc='best', shadow='true')
#### Shaddow legend.
# ---------------------
# ---------------------
plt.figure(figsize=(7,4))
plt.plot(x, y, 'k')
plt.xlabel('Frequency[Hz]')
plt.ylabel('$S_{21}$ [dB]')
plt.subplots_adjust(left=0.15)
plt.subplots_adjust(bottom=0.15)
plt.rcParams["font.size"] = 15
plt.grid(color = 'k', linestyle=':')
#### Typical plot.
# ---------------------
# ---------------------
plt.xticks(np.arange(min(x), max(x)+1, space))
##### Tick spacing.
# ---------------------
# ---------------------
ax1.ticklabel_format(useOffset=False)
##### Stop the terrible scientific notation matplotlib sometimes tries in classic plots.
# ---------------------
# ---------------------